{"ast":null,"code":"// Allows us to pass arrays and numbers instead of just strings to the format function.\nvar stringify = function stringify(arg) {\n  return Array.isArray(arg) ? arg.join(\", \") : typeof arg === \"string\" ? arg : \"\" + arg;\n}; // Replaces a string with the values of an object. Google \"format unicorn\" on an explanation of how to use.\n\n\nvar format = function format(str, args) {\n  return args ? Object.keys(args).reduce(function (str, arg) {\n    return str.replace(new RegExp(\"\\\\{\".concat(arg, \"\\\\}\"), 'gi'), stringify(args[arg]));\n  }, str) : str;\n};\n\nexport { format };","map":{"version":3,"names":["stringify","arg","Array","isArray","join","format","str","args","Object","keys","reduce","replace","RegExp"],"sources":["D:/Projects/New/api-visualizer-tool/node_modules/react-json-editor-ajrm/es/locale/index.js"],"sourcesContent":["// Allows us to pass arrays and numbers instead of just strings to the format function.\nconst stringify = arg => Array.isArray(arg) ? arg.join(\", \") : typeof arg === \"string\" ? arg : \"\" + arg; // Replaces a string with the values of an object. Google \"format unicorn\" on an explanation of how to use.\n\n\nconst format = (str, args) => args ? Object.keys(args).reduce((str, arg) => str.replace(new RegExp(`\\\\{${arg}\\\\}`, 'gi'), stringify(args[arg])), str) : str;\n\nexport { format };"],"mappings":"AAAA;AACA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAAAC,GAAG;EAAA,OAAIC,KAAK,CAACC,OAAN,CAAcF,GAAd,IAAqBA,GAAG,CAACG,IAAJ,CAAS,IAAT,CAArB,GAAsC,OAAOH,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgC,KAAKA,GAA/E;AAAA,CAArB,C,CAAyG;;;AAGzG,IAAMI,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD,EAAMC,IAAN;EAAA,OAAeA,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,MAAlB,CAAyB,UAACJ,GAAD,EAAML,GAAN;IAAA,OAAcK,GAAG,CAACK,OAAJ,CAAY,IAAIC,MAAJ,cAAiBX,GAAjB,UAA2B,IAA3B,CAAZ,EAA8CD,SAAS,CAACO,IAAI,CAACN,GAAD,CAAL,CAAvD,CAAd;EAAA,CAAzB,EAA4GK,GAA5G,CAAH,GAAsHA,GAAzI;AAAA,CAAf;;AAEA,SAASD,MAAT"},"metadata":{},"sourceType":"module"}